{"version":3,"sources":["components/SearchBar.module.css","components/Card.module.css","components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","SearchBar","onSearch","useState","city","setCity","className","estilos","contenedor","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","handleInputChange","search","Nav","titulo","Card","min","max","name","img","onClose","id","btn","onClick","src","Cards","cities","map","c","App","setCities","ciudad","fetch","then","r","json","recurso","undefined","main","Math","round","temp_min","temp_max","weather","icon","wind","speed","temp","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fecd03f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contenedor\":\"SearchBar_contenedor__1xaEt\",\"search\":\"SearchBar_search__3vgpu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contenedor\":\"Card_contenedor__2he3a\",\"cambioColor\":\"Card_cambioColor__1mGY4\",\"btn\":\"Card_btn__17R5X\"};","import React, { useState } from \"react\";\r\nimport estilos from './SearchBar.module.css'\r\n\r\nexport default function SearchBar({onSearch}) {\r\n\r\n  //defino estado local para ir guardando lo que escriba el \r\n  //usuario en la barra de búsqueda\r\n  const [city, setCity] = useState(\"\");\r\n  //defino una función que afectará a mi estado\r\n  //para pasarle el onChange del input\r\n  const handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    setCity(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className = {estilos.contenedor} >    \r\n    <form onSubmit={(e) => {\r\n      e.preventDefault(); //para q no refresque la pagina y perder los estados\r\n      //cuando haga el submit ejecutaré la función onSearch \r\n      //con mi estado city es decir, lo que sea que haya escrito\r\n      //el usuario.\r\n      onSearch(city);\r\n      setCity(\"\") \r\n      // esto es para luego de ingresar el dato, limpie el input\r\n    }}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Ciudad...\"\r\n        onChange={(e)=>handleInputChange(e)}\r\n      />\r\n      <input className = {estilos.search}type=\"submit\" value=\"Agregar\" /> \r\n      {/* por aca entra el evento onSubmit */}\r\n    </form>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport SearchBar from './SearchBar.jsx';\r\nimport './Nav.css';\r\nimport titulo from './Nav.css'\r\n\r\nfunction Nav({onSearch}) {\r\n  return (\r\n    <div>\r\n      <span className= { titulo }>Weather App</span>\r\n      <SearchBar onSearch = {onSearch}/>\r\n    </div>\r\n  );\r\n   \r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport estilos from './Card.module.css';\r\nimport './Card.css';\r\n\r\nexport default function Card ({min, max, name, img, onClose, id}) {\r\n    return (\r\n      <div className = {estilos.contenedor}>\r\n      <button className= {estilos.btn} onClick = {onClose}>X</button>\r\n      <div><h4>{name}</h4></div>      \r\n      <div><h6>Min</h6></div>\r\n      <div><p>{min}</p></div> \r\n      <div><h6>Max</h6></div>    \r\n      <div><p>{max}</p></div>\r\n      \r\n      <img src={ `http://openweathermap.org/img/wn/${img}@2x.png` } />\r\n    </div> \r\n    );\r\n};\r\n","import React from 'react';\r\nimport './Cards.css';\r\n\r\nimport Card from './Card.jsx';\r\n\r\nexport default function Cards({cities, onClose}) {\r\n  if(cities){\r\n    return (\r\n      <div className='cards'>\r\n        {cities.map(c => <Card\r\n            max={c.max}\r\n            min={c.min}\r\n            name={c.name}\r\n            img={c.img}\r\n            onClose={() => onClose(c.id)}\r\n            id={c.id}\r\n          /> )}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>Sin ciudades</div>\r\n    )\r\n  }\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cards from './components/Cards'; //Card o Cards?\n\n\n\nexport default function App() {\n//defino mi estado local cities y su función seteadore setCities\n  //el valor inicial de cities será un array vacío ([])\n  const [cities, setCities] = useState([]);\n\n  //defino mi variable apiKey\n  const apiKey = \"bce2b1e37cd170845db056019ace4b11\"\n\n  //defino la función onSearch\n  function onSearch(ciudad) { \n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n\n    }\n    //defino la función onClose\n    //a partir del id recibido, elimina dicha cudad del array de ciudades del estado.\n    function onClose(id) {\n      setCities(oldCities => oldCities.filter(c => c.id !== id)); \n      // Sacamos las ciudades q fueron cerradas del arreglo\n    }\n\n  return (\n    <div className=\"App\">\n      { /* Tu código acá: */ }\n\n     <Nav onSearch={onSearch}/>\n     <Cards cities = {cities} onClose = {onClose}/>\n    </div>\n  );\n  \n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}